In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.
If the town judge exists, then:
The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.
If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

Example 1:
Input: N = 2, trust = [[1,2]]
Output: 2

Example 2:
Input: N = 3, trust = [[1,3],[2,3]]
Output: 3

Example 3:
Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

Example 4:
Input: N = 3, trust = [[1,2],[2,3]]
Output: -1

Example 5:
Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3

Note:
1 <= N <= 1000
trust.length <= 10000
trust[i] are all different
trust[i][0] != trust[i][1]
1 <= trust[i][0], trust[i][1] <= N

class Solution(object):
    def findJudge(self, N, trust):
        """
        :type N: int
        :type trust: List[List[int]]
        :rtype: int
        """
        votes={}
        for i in range(1,N+1):
            votes[i]=0
        for i in range(0,len(trust)):
            v=trust[i][1]
            votes[v]=votes[v]+1
        for i in votes:
            if(votes[i]==N-1):
                flag=0
                for j in range(0,len(trust)):
                    if(trust[j][0]==i):
                        flag=1
                        break
                if(flag==0):
                    return i
        return -1
        """found=0
        for i in range(1,N+1):
            judge=i
            found=0
            count=0
            for j in range(0,len(trust)):
                #print(judge,trust[j][0])
                if(trust[j][0]==judge):
                    found=1
                if(trust[j][1]==judge):
                    count=count+1
            if(found==0 and count==(N-1)):
                return judge
        return -1"""

