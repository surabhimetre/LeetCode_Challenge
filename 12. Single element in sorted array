You are given a sorted array consisting of only integers where every element appears exactly twice, 
except for one element which appears exactly once. 
Find this single element that appears only once.

Example 1:
Input: [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: [3,3,7,7,10,11,11]
Output: 10

Note: Your solution should run in O(log n) time and O(1) space.

class Solution(object):
    def singleNonDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        
        l=[]
        for i in range(0,len(nums)):
            val=nums[i]
            l=nums
            l.remove(val)
            if val not in l:
                return val"""
        l=len(nums)
        for i in range(0,l):
            if(i>0 and i<l-1):
                if(nums[i-1]<nums[i]<nums[i+1]):
                    return nums[i]
            elif(i==0 and l>1):
                if(nums[i]<nums[i+1]):
                    return nums[i]
            else:
                return nums[l-1]
            
