Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.

Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


class Solution(object):
    def removeKdigits(self, num, k):
        """
        :type num: str
        :type k: int
        :rtype: str
        """
        """il=[]
        temp=[]
        min_val=10000000
        s=""
        s_value=""
        for i in range(0,len(num)):
            s=num[:i]+num[i+k:]
            if(s):
                n=int(s)
                if(n==0):
                    return "0"
                print(n)
                if(n<min_val):
                    min_val=n
                    s_value=s
            else:
                return "0"
        final_value=s_value
        for i in range(0,len(s_value)):
            #print(i,s_value)
            if(s_value[i]=="0"):
                final_value=s_value[i+1:]
            else:
                break
        s=list(num)
        s.sort()
        n="".join(map(str,s))
        n=n[:-k]
        if(n):
            val=int(n)
            if(val==0):
                return "0"
            else:
                return n
        else:
            return "0" """
        if len(num) <= k: return "0"
        digits = list(num)
        stack = []

        while digits and k:
            if not stack:
                stack.append(digits.pop(0))
            else:
                msd = digits.pop(0)
                while k and stack and stack[-1] > msd:
                        stack.pop()
                        k -= 1
                stack.append(msd)

        while k:
            # digits is empty
            stack.pop()
            k-=1
        
        digits = stack + digits
        # remove leading 0s
        while digits and digits[0] == "0":
            digits.pop(0)
        
        return "0" if not digits else ''.join(digits)
