Implement a trie with insert, search, and startsWith methods.

Example:
Trie trie = new Trie();
trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:
You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        #self.myTrie=[]
        self.myDict=dict()
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: None
        """
        #self.myTrie.append(word)
        self.myDict[word]=True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        #if word in self.myTrie:
            #return True
        #return False
        if(word not in self.myDict):
            return False
        return True

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        for key,val in self.myDict.items():
            if(key.startswith(prefix)):
                return True
        return False
        #for word in self.myTrie:
         #   if(word.startswith(prefix)):
          #      return True
        #return False
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
