Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.
Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.
The order of output does not matter.

Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


from collections import Counter

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
       
        if(s==p):
            idx=[0]
            return idx
        if(len(p)>len(s)):
            idx=[]
            return idx
        ana_len=len(p)
        incr=ana_len-1
        a_counter=Counter(p)
        idx=[]
        count=0
        #print(a_counter)
        for i in range(0,len(s)-incr):
            substr=s[i:i+ana_len]
            count=0
            #print(i,substr)
            s_counter=Counter(substr)
            for key,val in a_counter.items():
                #print(i,key,a_counter[key],s_counter[key])
                if(a_counter[key]<=s_counter[key]):
                    #print(i)
                    count=count+1
            if(count==len(a_counter)):
                idx.append(i)
            
        return idx
