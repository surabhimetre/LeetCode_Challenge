Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
In other words, one of the first string's permutations is the substring of the second string.

Example 1:
Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:
Input:s1= "ab" s2 = "eidboaoo"
Output: False

Note:
The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        if(s1==s2):
            return True
        if(len(s1)>len(s2)):
            return False
        ana_len=len(s1)
        incr=ana_len-1
        a_counter=Counter(s1)
        idx=[]
        count=0
        #print(a_counter)
        for i in range(0,len(s2)-incr):
            substr=s2[i:i+ana_len]
            count=0
            #print(i,substr)
            s_counter=Counter(substr)
            for key,val in a_counter.items():
                #print(i,key,a_counter[key],s_counter[key])
                if(a_counter[key]<=s_counter[key]):
                    #print(i)
                    count=count+1
            if(count==len(a_counter)):
                return True
        return False
