Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Constraints:
1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def insert(self,ptr,value):
        if(value<ptr.val):
            if(ptr.left==None):
                temp=TreeNode()
                temp.val=value
                ptr.left=temp
            else:
                self.insert(ptr.left,value)
        else:
            if(ptr.right==None):
                temp=TreeNode()
                temp.val=value
                ptr.right=temp
            else:
                self.insert(ptr.right,value)
        
        
    def bstFromPreorder(self, preorder):
        """
        :type preorder: List[int]
        :rtype: TreeNode
        """
        
        root=TreeNode()
        ptr=TreeNode()
        ptr=root
        ptr.val=preorder[0]
        i=1
        while(i<len(preorder)):
            value=preorder[i]
            self.insert(ptr,value)
            i=i+1
        return root
            
