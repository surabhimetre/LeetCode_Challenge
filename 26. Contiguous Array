Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.

Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note: The length of the given binary array will not exceed 50,000.

class Solution(object):
    def findMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        n = len(nums)
        max_val = 0
        index = {0: -1}
        summ = 0
        for i in range(n):
            if nums[i] == 1:
                summ += 1
            else:
                summ -= 1
            if summ not in index:
                index[summ] = i
            else:
                max_val = max(max_val,i-index[summ])
        return max_val
        """count0=0
        count1=0
        max_val=0
        val1=0
        val2=0
        for i in range(len(nums)):
            if(nums[i]==0):
                count0=count0+1
            if(nums[i]==1):
                count1=count1+1
            
            print(count1,count0)
            if(count1==count0):
                val1=(count1)*2
        
        if(count1>count0):
            val2=(count0)*2
        else:
            val2=count1*2
        max_val=min(val1,val2)
        return max_val"""








