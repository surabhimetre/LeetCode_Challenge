In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.
Two nodes of a binary tree are cousins if they have the same depth, but have different parents.
We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.
Return true if and only if the nodes corresponding to the values x and y are cousins. 

Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Note:
The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isCousins(self, root, x, y):
        """
        :type root: TreeNode
        :type x: int
        :type y: int
        :rtype: bool"""
       
        parent_x=0
        parent_y=0
        level_x=0
        level_y=0
        level=1
        parent=root.val    
        res=[]
        values=[parent_x,parent_y,level_x,level_y]
        def traverse(n,parent,level,values):
            #print("in")
            v=n.val
            print(v)
            parent_x=values[0]
            parent_y=values[1]
            level_x=values[2]
            level_y=values[3]
            if(x==v):
                parent_x=parent
                level_x=level+1
                #print(parent_x,level_x)
            if(y==v):
                level_y=level+1
                parent_y=parent
                #print(parent_y,level_y)
            l=n.left
            r=n.right
            values=[parent_x,parent_y,level_x,level_y]
            print(values)
            if(l):
                level=level+1 
                values=traverse(l,v,level,values)    
                level=level-1
                #return values
            
            if(r):
                level=level+1
                values=traverse(r,v,level,values)
                level=level-1
                #return values
            #level=level-1
            return values
            
           
        values=traverse(root,parent,level,values)
        #print(values)
        parent_x=values[0]
        parent_y=values[1]
        level_x=values[2]
        level_y=values[3]
        if(parent_x!=parent_y):
            diff=level_x-level_y
            if(diff==0):
                return True
        return False
                
 
